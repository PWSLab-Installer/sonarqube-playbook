---


- name: Ensure group "sonar" exists
  group:
    name: sonar
    state: present

- name: Add the user 'sonar'
  user:
    name: sonar
    group: sonar

- name: Create a new database with name "sonar"
  postgresql_db:
    name: sonar 

- name: Connect to acme database, create django user, and grant access to database and products table
  postgresql_user:
    db: sonar
    name: sonar
    password: sonar 

- name: Execute Postgres Commands
  command: psql -c 'GRANT ALL PRIVILEGES ON DATABASE \'sonar\' to sonar;'
  become: true
  become_user: postgres
  ignore_errors: yes  

- name: Download Sonar
  get_url:
    url: "{{ sonar_download_url }}"
    dest: "{{ workspace }}/{{ sonar_version_directory }}.zip"
    validate_certs: "{{ sonar_download_validate_certs }}"

- name: Unzip Sonar
  unarchive:
    src: "{{ workspace }}/{{ sonar_version_directory }}.zip"
    dest: /usr/local/
    copy: false
    creates: /usr/local/sonar/COPYING

- name: Move Sonar into place
  command: >
    mv /usr/local/{{ sonar_version_directory }} /usr/local/sonar
    creates=/usr/local/sonar/COPYING

- name: Configure SonarQube JDBC settings for PostgreSQL
  lineinfile:
    dest: /usr/local/sonar/conf/sonar.properties
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  notify: restart sonar
  with_items:
    - regexp: "^sonar.jdbc.username"
      line: "sonar.jdbc.username={{ sonar_postgres_username }}"
    - regexp: "^sonar.jdbc.password"
      line: "sonar.jdbc.password={{ sonar_postgres_password }}"
    - regexp: "^sonar.jdbc.url"
      line: "sonar.jdbc.url=jdbc:postgresql://{{ sonar_postgres_host }}:{{ sonar_postgres_port }}/{{ sonar_postgres_database }}"
    - regexp: "^sonar.web.context"
      line: "sonar.web.context={{ sonar_web_context }}"

- name: Symlink sonar bin
  file:
    src: /usr/local/sonar/bin/linux-x86-64/sonar.sh
    dest: /usr/bin/sonar
    state: link
  register: sonar_symlink

- name: Add sonar as init script for service management
  file:
    src: /usr/local/sonar/bin/linux-x86-64/sonar.sh
    dest: /etc/init.d/sonar
    state: link
  when: "ansible_service_mgr != 'systemd'"

- name: Copy SonarQube systemd unit file into place (for systemd systems)
  template:
    src: sonar.unit.j2
    dest: /etc/systemd/system/sonar.service
    owner: root
    group: root
    mode: 0755
  when: "ansible_service_mgr == 'systemd'"

- name: Ensure Sonar is running and set to start on boot
  service: name=sonar state=started enabled=yes

- name: Allow Sonar time to build on first start
  pause: seconds=180
  when: sonar_symlink.changed
  tags: ['skip_ansible_lint']

- name: Make sure Sonar is responding on the configured port
  wait_for: port=9000 delay=3 timeout=300